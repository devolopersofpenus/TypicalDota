custom_ability_finnick_invulnerability = class({})
LinkLuaModifier( "custom_modifier_finnick_invulnerability", "ability/finnick/custom_ability_finnick_invulnerability", LUA_MODIFIER_MOTION_NONE )

function custom_ability_finnick_invulnerability:GetIntrinsicModifierName()
  return "custom_modifier_finnick_invulnerability"
end

custom_modifier_finnick_invulnerability = class({})

function custom_modifier_finnick_invulnerability:IsHidden() return true end

function custom_modifier_finnick_invulnerability:OnCreated(kv)
	if IsServer() then
		self.interval_tick = 0.1
		self.hdie = false
		self:StartIntervalThink(self.interval_tick)
	end
end

function custom_modifier_finnick_invulnerability:DeclareFunctions()
	local funcs =
	{
		MODIFIER_PROPERTY_MIN_HEALTH,
		MODIFIER_EVENT_ON_ATTACK_LANDED,
	} return funcs
end

function custom_modifier_finnick_invulnerability:GetMinHealth()
	if self:GetCaster():IsIllusion() then
		return 0
	else
		return 1
	end
end

function custom_modifier_finnick_invulnerability:GetModifierHealthRegenPercentage()
	return 200
end

function custom_modifier_finnick_invulnerability:OnIntervalThink()
	if IsServer() then
		if  (self:GetCaster():GetHealth() == 1) and self.hdie == false then 
			self.hdie = true
			self:GetCaster():SetMana(0)
			self:DeadAnimation(ACT_DOTA_DIE)
			PauseGame(true)
		elseif (self:GetCaster():GetMaxHealth()/10 <= self:GetCaster():GetHealth()) and self.hdie == true then
			self.hdie = false
		end
		if self.hdie then
			self:GetCaster():SetMana(self:GetCaster():GetMana()+self:GetCaster():GetMaxMana()*(100/(30+self:GetCaster():GetLevel())*0.01)*self.interval_tick)--(100/((second+self:GetCaster():GetLevel())*coofidient)*0.01))
				if self:GetCaster():GetMana() == self:GetCaster():GetMaxMana() then
					self:GetCaster():SetMana(0)
					self:GetCaster():SetHealth(self:GetCaster():GetMaxHealth()*0.1+self:GetCaster():GetMaxMana())
				end
		else
			if not self:GetCaster():FindModifierByName("modifier_fountain_aura_buff") then
				local damage =
				{
					victim = self:GetCaster(),
					attacker = self:GetCaster(),
					damage = self:GetCaster():GetMaxHealth()*0.01/1.2*self.interval_tick,
					damage_type = DAMAGE_TYPE_PURE,
					damage_flags = DOTA_DAMAGE_FLAG_HPLOSS,

				}
				ApplyDamage(damage)
			end
		end
	end
end

function custom_modifier_finnick_invulnerability:OnAttackLanded(params)
	if IsServer() then
		if self:GetCaster() == params.attacker then
			if params.target:IsHero() then 
				self:GetCaster():Heal(self:GetCaster():GetMaxHealth()*0.025,self:GetAbility())
			elseif params.target:IsCreep() then
				self:GetCaster():Heal(self:GetCaster():GetMaxHealth()*0.0075,self:GetAbility())
			end
		end
	end
end

function custom_modifier_finnick_invulnerability:DeadAnimation( animation )
	self:GetCaster():StartGesture(animation)
end

function custom_modifier_finnick_invulnerability:CheckState()
	local state
	if IsServer() then	
		if self.hdie then 
			state=
			{
				[MODIFIER_STATE_STUNNED] = true,	
				[MODIFIER_STATE_NO_HEALTH_BAR] = true,
				[MODIFIER_STATE_NO_UNIT_COLLISION] = true,
				[MODIFIER_STATE_ATTACK_IMMUNE] = true,
				[MODIFIER_STATE_LOW_ATTACK_PRIORITY] = true,
			}
		end
	end
	return state
end